const { sequelize } = require('../config/database');
const { DataTypes } = require('sequelize');
// –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
const Cliente = require('./cliente')(sequelize, DataTypes);
const Pedido = require('./pedido')(sequelize, DataTypes);
const Producto = require('./producto')(sequelize, DataTypes);
const Trabajo = require('./trabajo')(sequelize, DataTypes);
const PedidoProducto = require('./pedidoProducto')(sequelize, DataTypes);
const Mensaje = require('./mensaje')(sequelize, DataTypes);

// --- üìå –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π (–∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π) ---
const models = {
  Cliente,
  Pedido,
  Producto,
  Trabajo,
  PedidoProducto,
  Mensaje,
};

// –í—ã–∑—ã–≤–∞–µ–º associate –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π, –µ—Å–ª–∏ –µ—Å—Ç—å
Object.values(models).forEach(model => {
  if (typeof model.associate === 'function') {
    model.associate(models);
  }
});

// --- –ú–Ω–æ–≥–∏–µ –∫–æ –º–Ω–æ–≥–∏–º: –∑–∞–∫–∞–∑—ã –∏ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ —Å–≤—è–∑—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É PedidoProducto ---
Pedido.belongsToMany(Producto, {
  through: PedidoProducto,
  foreignKey: 'pedidoId',
  otherKey: 'productoId'
});
Producto.belongsToMany(Pedido, {
  through: PedidoProducto,
  foreignKey: 'productoId',
  otherKey: 'pedidoId'
});

// --- –ü—Ä—è–º—ã–µ —Å–≤—è–∑–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ) ---
PedidoProducto.belongsTo(Pedido, { foreignKey: 'pedidoId' });
PedidoProducto.belongsTo(Producto, { foreignKey: 'productoId' });

// --- –ö–ª–∏–µ–Ω—Ç –∏ –∑–∞–∫–∞–∑—ã ---
Cliente.hasMany(Pedido, { foreignKey: 'clienteId' });
Pedido.belongsTo(Cliente, { foreignKey: 'clienteId' });

// --- –ó–∞–∫–∞–∑ –∏ —Ä–∞–±–æ—Ç–∞ (1 –∫ 1) ---
Pedido.hasOne(Trabajo, { foreignKey: 'pedidoId', onDelete: 'CASCADE' });
Trabajo.belongsTo(Pedido, { foreignKey: 'pedidoId' });


// --- –ü—Ä—è–º—ã–µ —Å–≤—è–∑–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ) ---;
// –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–≤—è–∑–∏, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è:
// Pedido.hasMany(PedidoProducto, { foreignKey: 'pedidoId' });
// Producto.hasMany(PedidoProducto, { foreignKey: 'productoId' });

// --- –ö–ª–∏–µ–Ω—Ç –∏ —Å–æ–æ–±—â–µ–Ω–∏—è ---
Cliente.hasMany(Mensaje, { foreignKey: 'clienteId' });
Mensaje.belongsTo(Cliente, { foreignKey: 'clienteId' });

// --- –ó–∞–∫–∞–∑ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
Pedido.hasMany(Mensaje, { foreignKey: 'relacionadoConPedidoId' });
Mensaje.belongsTo(Pedido, { foreignKey: 'relacionadoConPedidoId' });

module.exports = {
  sequelize,
  ...models,
};