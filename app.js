// app.js
require('dotenv').config(); // –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env

var createError = require('http-errors');
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');
var session = require('express-session');
var SequelizeStore = require('connect-session-sequelize')(session.Store);
var expressLayouts = require('express-ejs-layouts');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ –≤—Å–µ –º–æ–¥–µ–ª–∏
const { sequelize, connectToDatabase } = require('./config/database');
const { Cliente, Producto, Pedido, Trabajo, PedidoProducto, Mensaje } = require('./models'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∏ –∏—Ö —Å–≤—è–∑–∏

const helmet = require("helmet");
const rateLimit = require("express-rate-limit");

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã
var indexRouter = require('./routes/index');
var authRouter = require('./routes/auth'); // –ù–û–í–´–ô —Ä–æ—É—Ç –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
var adminRouter = require('./routes/admin'); // –ù–û–í–´–ô —Ä–æ—É—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
var clientRouter = require('./routes/client'); // –ù–û–í–´–ô —Ä–æ—É—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞

var app = express();

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–≤–∏–∂–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ ---
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º express-ejs-layouts
app.use(require('express-ejs-layouts'));

// --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ middleware Express ---
app.use(logger('dev'));
app.use(express.json()); // –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(express.urlencoded({ extended: false })); // –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL-encoded –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use(helmet({
  contentSecurityPolicy: false,
  crossOriginEmbedderPolicy: false
}));

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π ---
const sessionStore = new SequelizeStore({
  db: sequelize,
  tableName: 'sessions', // –ò–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –≤ –ë–î
  checkExpirationInterval: 15 * 60 * 1000, // –ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç —É–¥–∞–ª—è—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏
  expiration: 24 * 60 * 60 * 1000 // –°–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
});

app.use(session({
  secret: process.env.SESSION_SECRET, // –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ .env
  store: sessionStore,
  resave: false,
  saveUninitialized: false,
  cookie: { secure: false } // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π true –∏ https
}));
sessionStore.sync(); // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å–µ—Å—Å–∏–π

// Middleware –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ req.locals –¥–ª—è EJS
app.use((req, res, next) => {
  res.locals.isAuthenticated = req.session.userId ? true : false;
  res.locals.user = req.session.user || null; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏

    // ---- –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ title, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –≤ layout.ejs ----
  res.locals.title = 'Tech Store';

   // console.log('app.js: res.locals before next:', res.locals); // –ù–ï –†–ê–°–ö–û–ú–ú–ï–ù–¢–ò–†–£–ô–¢–ï –≠–¢–û
  next();
});

const loginLimiter = rateLimit({
  windowMs: 30 * 60 * 1000, // 30 –º–∏–Ω—É—Ç
  max: 3, // 3 –ø–æ–ø—ã—Ç–∫–∏
  handler: (req, res) => {
    res.status(429);
    res.render("errorLimit", {
      mensaje: "Has superado el n√∫mero de intentos de inicio de sesi√≥n. Intenta m√°s tarde."
    });
  }
});

// --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–æ–≤ ---
app.use('/', indexRouter);
app.use('/auth/login', loginLimiter); // –õ–∏–º–∏—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–Ω
app.use('/auth', authRouter); // –†–æ—É—Ç—ã –¥–ª—è –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
app.use('/admin', adminRouter); // –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ —Ä–æ—É—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
app.use('/client', clientRouter); // –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ —Ä–æ—É—Ç—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞


// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫ ---
app.use(function(req, res, next) {
  next(createError(404));
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ---
app.use(function(err, req, res, next) {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º locals, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –æ—à–∏–±–∫–∏ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—à–∏–±–∫–∏
  // –ü–µ—Ä–µ–¥–∞–µ–º title –≤ —Ä–µ–Ω–¥–µ—Ä, —á—Ç–æ–±—ã layout.ejs –Ω–µ —Ä—É–≥–∞–ª—Å—è –Ω–∞ undefined
  res.status(err.status || 500);
  res.render('error', { title: 'Error' }); // <-- –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä title –¥–ª—è error.ejs
});

// --- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
async function startApp() {
  await connectToDatabase(); // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
  // sequelize.sync({ alter: true })
  // –ï—Å–ª–∏ —Ç—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –ë–î —Å–æ–∑–¥–∞–Ω–∞ SQL-—Å–∫—Ä–∏–ø—Ç–æ–º, –∏ –Ω–µ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã Sequelize –µ–µ –º–µ–Ω—è–ª,
  // –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `force: false` (–Ω–µ —É–¥–∞–ª—è—Ç—å —Ç–∞–±–ª–∏—Ü—ã)
  // –∏–ª–∏ `alter: true` (–≤–Ω–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è)
  // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è SQL-—Å–∫—Ä–∏–ø—Ç–æ–º, force: false - —Å–∞–º—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.
  // –í–ù–ò–ú–ê–ù–ò–ï: force: true –£–î–ê–õ–Ø–ï–¢ –í–°–ï –î–ê–ù–ù–´–ï –í –¢–ê–ë–õ–ò–¶–ê–• –ò –°–û–ó–î–ê–ï–¢ –ò–• –ó–ê–ù–û–í–û!
  try {
    await sequelize.sync(); // –ë—É–¥–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ç–∞–±–ª–∏—Ü—ã –ø–æ–¥ –º–æ–¥–µ–ª–∏, –Ω–µ —É–¥–∞–ª—è—è –¥–∞–Ω–Ω—ã–µ.
    console.log('Todos los modelos est√°n sincronizados con la base de datos.');

    // –í–û–¢ –°–Æ–î–ê –ú–û–ñ–ù–û –ü–û–ú–ï–°–¢–ò–¢–¨ –õ–û–ì–ò, –ï–°–õ–ò –û–ù–ò –ù–£–ñ–ù–´:
    // console.log('app.js: View engine settings:', app.settings['view engine'], 'views:', app.settings['views']);
    // console.log('app.js: Layout middleware applied.');

  } catch (error) {
    console.error('Error al sincronizar los modelos con la base de datos:', error);
  }
}

startApp(); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket —á–µ—Ä–µ–∑ Socket.IO ---
const http = require('http');
const server = http.createServer(app);
const { Server } = require('socket.io');
const io = new Server(server);
app.set('io', io);
// –°–ª—É—à–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
io.on('connection', (socket) => {
  console.log('üü¢ Cliente conectado a WebSocket');

  // –ö–ª–∏–µ–Ω—Ç –∏–ª–∏ –∞–¥–º–∏–Ω –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–æ–±—â–∞—Ç—å, –∫—Ç–æ –æ–Ω, –∏ –∫ –∫–∞–∫–æ–π –∫–æ–º–Ω–∞—Ç–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è:
  socket.on('joinRoom', ({ clienteId, role }) => {
    if (!clienteId || !role) return;
    const room = `cliente_${clienteId}`;
    socket.join(room);
    console.log(`${role} Conectado a la sala ${room}`);
  });

  // üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å–æ–æ–±—â–µ–Ω–∏—è
  socket.on('nuevoMensaje', async (data) => {
    console.log('[WebSocket] Nuevo mensaje recibido:', data);
    try {
      const nuevoMensaje = await Mensaje.create({
        clienteId: data.clienteId,
        contenido: data.contenido,
        asunto: null, // –¥–ª—è —á–∞—Ç–∞ —Ç–µ–º–∞ –Ω–µ –Ω—É–∂–Ω–∞
        // –¥–∞—Ç–∞ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        remitente: 'cliente'
      });

      const room = `cliente_${data.clienteId}`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–º–Ω–∞—Ç—É –∫–ª–∏–µ–Ω—Ç–∞ (–≤—Å–µ–º, –∫—Ç–æ —Å–ª—É—à–∞–µ—Ç)
      io.to(room).emit('mensajeRecibido', {
        id: nuevoMensaje.id,
        clienteId: nuevoMensaje.clienteId,
        contenido: nuevoMensaje.contenido,
        fechaEnvio: nuevoMensaje.fechaEnvio,
        remitente: 'cliente',
      });

      console.log('‚úÖ Mensaje guardado correctamente en la base de datos, ID:', nuevoMensaje.id);
  } catch (err) {
    console.error('‚ùå Error al guardar el mensaje:', err);
  }
  });

      socket.on('respuestaAdmin', async (data) => {
    try {
      const mensaje = await Mensaje.create({
        clienteId: data.clienteId,
        contenido: data.contenido,
        remitente: 'admin',
        asunto: null,
      });

      const room = `cliente_${data.clienteId}`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É –∫–ª–∏–µ–Ω—Ç–∞
      io.to(room).emit('mensajeRecibido', {
        id: mensaje.id,
        clienteId: mensaje.clienteId,
        contenido: mensaje.contenido,
        remitente: 'admin',
        fechaEnvio: mensaje.fechaEnvio,
      });

      console.log('‚úÖ El administrador envi√≥ la respuesta al cliente');
    } catch (error) {
      console.error('Error al enviar la respuesta del administrador WebSocket:', error);
    }
  });

  socket.on('obtenerHistorial', async ({ clienteId, requesterId, role }) => {
  if (role === 'cliente' && requesterId !== clienteId) {
    return socket.emit('error', 'Sin acceso a los mensajes de otras personas');
  }

  const historial = await Mensaje.findAll({
    where: { clienteId },
    order: [['fechaEnvio', 'ASC']]
  });

  socket.emit('historialMensajes', historial);
});



  // üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
  socket.on('mensajeChat', (mensaje) => {
    io.emit('mensajeChat', mensaje); // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
  });

  socket.on('disconnect', () => {
    console.log('üî¥ Cliente desconectado de WebSocket');
  });
});

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3001;
server.listen(PORT, () => {
  console.log(`üåê Servidor iniciado en http://localhost:${PORT}`);
});

module.exports = app;