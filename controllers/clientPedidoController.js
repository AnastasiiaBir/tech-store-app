const { Pedido, PedidoProducto, Producto } = require('../models');

// --- –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ ---
exports.getProductos = async (req, res) => {
  try {
    const productos = await Producto.findAll();
    res.render('client/productos', {
      title: 'Cat√°logo de Productos',
      productos,
      user: req.session.user
    });
  } catch (error) {
    console.error('Error al cargar el cat√°logo de productos:', error);
    res.status(500).render('error', { title: 'Error', message: 'Error al cargar productos', error });
  }
};

// üì¶ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.getPedidos = async (req, res) => {
  try {
    const userId = req.session.user.id;
    const pedidos = await Pedido.findAll({
      where: { clienteId: userId },
      include: [{
        model: PedidoProducto,
        as: 'items',
        include: [{ model: Producto, as: 'producto' }]
      }],
      order: [['createdAt', 'DESC']]
    });

    res.render('client/pedidos', {
      title: 'Mis Pedidos',
      user: req.session.user,
      pedidos
    });
  } catch (error) {
    console.error('Error al cargar pedidos:', error);
    res.status(500).render('error', { title: 'Error', message: 'Error al cargar pedidos', error });
  }
};

// üõí –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑ (–∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑)
exports.realizarPedido = async (req, res) => {
  try {
    const userId = req.session.user.id;
    const productoId = req.body.productoId;

    const producto = await Producto.findByPk(productoId);
    if (!producto) return res.status(404).send('Producto no encontrado');

    let pedido = await Pedido.findOne({
      where: { clienteId: userId, estadoPago: 'Sin liquidar'}
    });
    // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    if (!pedido) {
      pedido = await Pedido.create({
        clienteId: userId,
        total: 0,
        estadoPago: 'Sin liquidar',
        montoPagado: 0
      });
    }
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–∫–∞–∑–µ
    let pedidoProducto = await PedidoProducto.findOne({
      where: { pedidoId: pedido.id, productoId}
    });

    if (pedidoProducto) {
      pedidoProducto.cantidad += 1;
      await pedidoProducto.save();
    } else {
      await PedidoProducto.create({
        pedidoId: pedido.id,
        productoId,
        cantidad: 1,
        precioUnitarioAlMomento: producto.precioUnitario
      });
    }

    await actualizarTotalPedido(pedido.id);
    res.redirect('/client/mis-pedidos');
  } catch (error) {
    console.error('‚ùå Error al crear o actualizar el pedido:', error);
    res.status(500).send('Error al crear o actualizar el pedido');
  }
};

// ‚ûï –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
exports.sumarCantidad = async (req, res) => {
  try {
    const { pedidoId, productoId } = req.params;
    const item = await PedidoProducto.findOne({ where: { pedidoId, productoId } });
    if (!item) return res.status(404).send('Producto no encontrado en el pedido');

    item.cantidad += 1;
    await item.save();

    await actualizarTotalPedido(pedidoId);
    res.redirect('/client/mis-pedidos');
  } catch (error) {
    console.error('Error al aumentar la cantidad:', error);
    res.status(500).send('Error al aumentar la cantidad');
  }
};

// ‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
exports.restarCantidad = async (req, res) => {
  try {
    const { pedidoId, productoId } = req.params;
    const item = await PedidoProducto.findOne({ where: { pedidoId, productoId } });
    if (!item) return res.status(404).send('Producto no encontrado en el pedido');

    if (item.cantidad > 1) {
      item.cantidad -= 1;
      await item.save();
    } else {
      await item.destroy();
    }

    await actualizarTotalPedido(pedidoId);
    res.redirect('/client/mis-pedidos');
  } catch (error) {
    console.error('Error al reducir la cantidad:', error);
    res.status(500).send('Error al reducir la cantidad');
  }
};

// üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∑–∞–∫–∞–∑–∞
exports.eliminarProductoDelPedido = async (req, res) => {
  try {
    const { pedidoId, productoId } = req.params;
    const item = await PedidoProducto.findOne({ where: { pedidoId, productoId } });
    if (!item) return res.status(404).send('Producto no encontrado en el pedido');

    await item.destroy();
    await actualizarTotalPedido(pedidoId);
    res.redirect('/client/mis-pedidos');
  } catch (error) {
    console.error('Error al eliminar el producto:', error);
    res.status(500).send('Error al eliminar el producto del pedido');
  }
};

// üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑
exports.pagarPedido = async (req, res) => {
  try {
    const { pedidoId } = req.params;
    const pedido = await Pedido.findByPk(pedidoId);
    if (!pedido) return res.status(404).send('Pedido no encontrado');

    pedido.estadoPago = 'Pagado';
    pedido.montoPagado = pedido.total;
    await pedido.save();

    res.redirect('/client/mis-pedidos');
  } catch (error) {
    console.error('Error al pagar el pedido:', error);
    res.status(500).send('Error al pagar el pedido');
  }
};

// üîÑ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–µ—Ä–µ—Å—á—ë—Ç —Å—É–º–º—ã
async function actualizarTotalPedido(pedidoId) {
  const items = await PedidoProducto.findAll({ where: { pedidoId } });
  let total = 0;
  for (const item of items) {
    total += item.cantidad * parseFloat(item.precioUnitarioAlMomento);
  }

  const pedido = await Pedido.findByPk(pedidoId);
  pedido.total = total;
  await pedido.save();
}